{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsPsych } from \"jspsych\";\nimport jsPsychHtmlKeyboardResponse from '@jspsych/plugin-html-keyboard-response';\nimport jsPsychHtmlButtonResponse from '@jspsych/plugin-html-button-response';\nimport jsPsychInstructions from '@jspsych/plugin-instructions';\n\n/* Constants */\nconst default_n_cards = 16;\nconst default_cols = 4;\nconst default_rounds = [\n    { loss_cards: 1, gain_amount: 10, loss_amount: 250 },\n    { loss_cards: 1, gain_amount: 10, loss_amount: 250 },\n    { loss_cards: 1, gain_amount: 10, loss_amount: 250 },\n    { loss_cards: 1, gain_amount: 10, loss_amount: 250 },\n    { loss_cards: 1, gain_amount: 10, loss_amount: 250 },\n    { loss_cards: 1, gain_amount: 10, loss_amount: 250 },\n    { loss_cards: 1, gain_amount: 10, loss_amount: 250 },\n    { loss_cards: 1, gain_amount: 10, loss_amount: 250 }\n];\n\n/* Types */\ninterface round_config {\n    loss_cards: number;\n    gain_amount: number;\n    loss_amount: number;\n}\n\ninterface round_data {\n    score: number;\n    cards: number;\n    ended: boolean;\n    start_time: number;\n    selections: Array<{card: number, time: number}>;\n}\n\ninterface GameState {\n    total_score: number;\n    round_data: round_data | null;\n    rounds_completed: number;\n}\n\n/* Internal state */\nlet state: GameState = {\n    total_score: 0,\n    round_data: null,\n    rounds_completed: 0\n};\n\n/* Internal functions */\nfunction resetState() {\n    state = {\n        total_score: 0,\n        round_data: null,\n        rounds_completed: 0\n    };\n}\n\nfunction setupRound(jsPsych: JsPsych, cfg: round_config, round_num: number, cols: number, n_cards: number) {\n    // Create card layout\n    const lossPositions: number[] = [];\n    while (lossPositions.length < cfg.loss_cards) {\n        const pos = Math.floor(Math.random() * n_cards);\n        if (!lossPositions.includes(pos)) lossPositions.push(pos);\n    }\n    \n    state.round_data = {\n        score: 0,\n        cards: 0,\n        ended: false,\n        start_time: Date.now(),\n        selections: []\n    };\n    \n    // Card click handlers\n    const cards = document.querySelectorAll('.card');\n    cards.forEach((card, i) => {\n        card.addEventListener('click', function() {\n            if (!state.round_data || state.round_data.ended || !this.classList.contains('card-back')) return;\n            \n            state.round_data.cards++;\n            state.round_data.selections.push({card: i, time: Date.now() - state.round_data.start_time});\n            \n            if (lossPositions.includes(i)) {\n                this.className = 'card card-loss';\n                this.textContent = `-${cfg.loss_amount}`;\n                state.round_data.score -= cfg.loss_amount;\n                state.round_data.ended = true;\n                const messageEl = document.getElementById('message');\n                if (messageEl) {\n                    messageEl.innerHTML = '<b style=\"color:#EF4444\">Loss card! Round ended.</b>';\n                }\n                setTimeout(() => endRound(jsPsych, cfg, round_num, false), 2000);\n            } else {\n                this.className = 'card card-gain';\n                this.textContent = `+${cfg.gain_amount}`;\n                state.round_data.score += cfg.gain_amount;\n                const scoreEl = document.getElementById('round-score');\n                if (scoreEl) {\n                    scoreEl.textContent = state.round_data.score.toString();\n                }\n                \n                if (state.round_data.cards === n_cards - cfg.loss_cards) {\n                    state.round_data.ended = true;\n                    const messageEl = document.getElementById('message');\n                    if (messageEl) {\n                        messageEl.innerHTML = '<b style=\"color:#22C55E\">All gain cards found!</b>';\n                    }\n                    setTimeout(() => endRound(jsPsych, cfg, round_num, true), 2000);\n                }\n            }\n        });\n    });\n    \n    // Stop button\n    const stopBtn = document.getElementById('stop-btn');\n    if (stopBtn) {\n        stopBtn.addEventListener('click', function() {\n            if (state.round_data && !state.round_data.ended) {\n                state.round_data.ended = true;\n                const messageEl = document.getElementById('message');\n                if (messageEl) {\n                    messageEl.innerHTML = '<b style=\"color:#1E3A8A\">Round stopped!</b>';\n                }\n                setTimeout(() => endRound(jsPsych, cfg, round_num, true), 1500);\n            }\n        });\n    }\n}\n\nfunction endRound(jsPsych: JsPsych, cfg: round_config, round_num: number, voluntary: boolean) {\n    if (!state.round_data) return;\n    \n    state.total_score += state.round_data.score;\n    state.rounds_completed++;\n    \n    const currentTrial = jsPsych.getCurrentTrial();\n    if (currentTrial) {\n        currentTrial.data = {\n            task: 'round_complete',\n            round: round_num,\n            ...cfg,\n            cards_selected: state.round_data.cards,\n            round_score: state.round_data.score,\n            total_score: state.total_score,\n            voluntary_stop: voluntary,\n            selections: state.round_data.selections,\n            rt: Date.now() - state.round_data.start_time\n        };\n    }\n    \n    jsPsych.finishTrial();\n}\n\n/* Timeline component generating functions */\nfunction createInstructions() {\n    const instructions = {\n        type: jsPsychInstructions,\n        pages: [\n            `<h1>Columbia Card Task</h1>\n            <p>Select cards to earn points. Most cards give you points, but some lose points and end the round.</p>\n            <p>You can stop anytime to keep your points, or keep selecting for more.</p>`,\n            `<h2>Strategy</h2>\n            <p>Before each round, you'll see:</p>\n            <ul><li>Number of loss cards</li><li>Points per gain card</li><li>Loss penalty</li></ul>\n            <p>Use this info to decide your risk!</p>`\n        ],\n        show_clickable_nav: true,\n        allow_backward: false\n    };\n    \n    return instructions;\n}\n\nfunction createRoundInfo(round_num: number, totalRounds: number, round_config: round_config) {\n    const round_info = {\n        type: jsPsychHtmlButtonResponse,\n        stimulus: () => {\n            return `<div class=\"round-info\">\n                <h2>Round ${round_num} of ${totalRounds}</h2>\n                <p>Loss cards: <b style=\"color:#EF4444\">${round_config.loss_cards}</b></p>\n                <p>Loss penalty: <b style=\"color:#EF4444\">-${round_config.loss_amount}</b></p>\n                <p>Gain per card: <b style=\"color:#22C55E\">+${round_config.gain_amount}</b></p>\n                <p>Total score: <span class=\"score-display\">${state.total_score}</span></p>\n            </div>`;\n        },\n        choices: ['Start']\n    };\n    \n    return round_info;\n}\n\nfunction createCardGame(\n    jsPsych: JsPsych, \n    round_num: number, \n    round_config: round_config, \n    n_cards: number, \n    cols: number\n) {\n    const cardGame = {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: function() {\n            const cards = Array.from({length: n_cards}, (_, i) => \n                `<div class=\"card card-back\" id=\"card-${i}\">?</div>`\n            ).join('');\n            \n            return `<style>.card-grid { grid-template-columns: repeat(${cols}, 1fr) !important; }</style>\n                <div class=\"game-info\">\n                    <h3>Round ${round_num}</h3>\n                    <p>Score: <span id=\"round-score\">0</span> | Total: ${state.total_score}</p>\n                </div>\n                <div class=\"card-grid\">\n                    ${cards}\n                </div>\n                <div class=\"button-container\">\n                    <button class=\"stop-button\" id=\"stop-btn\">Stop and Keep Points</button>\n                </div>\n                <div id=\"message\"></div>`;\n        },\n        choices: \"NO_KEYS\",\n        on_load: function() {\n            setupRound(jsPsych, round_config, round_num, cols, n_cards);\n        }\n    };\n    \n    return cardGame;\n}\n\nfunction createResults(jsPsych: JsPsych) {\n    const results = {\n        type: jsPsychHtmlButtonResponse,\n        stimulus: function() {\n            const data = jsPsych.data.get().filter({task: 'round_complete'});\n            const avg_cards = data.count() > 0 ? data.select('cards_selected').mean() : 0;\n            \n            let final_score = 0;\n            if (data.count() > 0) {\n                const scores = data.select('total_score').values;\n                final_score = scores[scores.length - 1];\n            }\n            \n            return `<div class=\"round-info\">\n                <h2>Task Complete!</h2>\n                <p>Final Score: <span class=\"score-display\">${final_score}</span></p>\n                <p>Average cards selected: ${avg_cards.toFixed(1)}</p>\n            </div>`;\n        },\n        choices: ['Continue']\n    };\n    \n    return results;\n}\n\n/* Main timeline creation function */\nexport function createTimeline(\n    jsPsych: JsPsych,\n    {\n        n_cards = default_n_cards,\n        cols = default_cols,\n        rounds = default_rounds,\n        show_instructions = true,\n        show_results = true\n    }: {\n        n_cards?: number,\n        cols?: number,\n        rounds?: round_config[],\n        show_instructions?: boolean,\n        show_results?: boolean\n    } = {}\n) {\n    // Reset state for new timeline\n    resetState();\n    \n    const timeline: any[] = [];\n    \n    // Add instructions if requested\n    if (show_instructions) {\n        timeline.push(createInstructions());\n    }\n    \n    // Add rounds\n    rounds.forEach((round_config, idx) => {\n        const round_num = idx + 1;\n        \n        // Round info\n        timeline.push(createRoundInfo(round_num, rounds.length, round_config));\n        \n        // Card game\n        timeline.push(createCardGame(jsPsych, round_num, round_config, n_cards, cols));\n    });\n    \n    // Add results if requested\n    if (show_results) {\n        timeline.push(createResults(jsPsych));\n    }\n    \n    return timeline;\n}\n\n/* Export individual components for custom timeline building */\nexport const timelineComponents = {\n    createInstructions,\n    createRoundInfo,\n    createCardGame,\n    createResults\n};\n\n/* Export utility functions */\nexport const utils = {\n    resetState,\n    setupRound,\n    endRound\n};\n\n/* Export types */\nexport type { round_config, round_data, GameState };"]}