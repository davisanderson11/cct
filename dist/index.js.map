{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsPsych } from \"jspsych\";\nimport jsPsychHtmlKeyboardResponse from '@jspsych/plugin-html-keyboard-response';\nimport jsPsychInstructions from '@jspsych/plugin-instructions';\n\n/* Constants */\nconst DEFAULT_NUM_CARDS = 16;\nconst DEFAULT_GRID_COLS = 4;\nconst DEFAULT_ROUNDS = [\n    { lossCards: 1, gainAmount: 10, lossAmount: 250 },\n    { lossCards: 1, gainAmount: 10, lossAmount: 250 },\n    { lossCards: 1, gainAmount: 10, lossAmount: 250 },\n    { lossCards: 1, gainAmount: 10, lossAmount: 250 },\n    { lossCards: 1, gainAmount: 10, lossAmount: 250 },\n    { lossCards: 1, gainAmount: 10, lossAmount: 250 },\n    { lossCards: 1, gainAmount: 10, lossAmount: 250 },\n    { lossCards: 1, gainAmount: 10, lossAmount: 250 }\n];\n\n/* Types */\ninterface RoundConfig {\n    lossCards: number;\n    gainAmount: number;\n    lossAmount: number;\n}\n\ninterface RoundData {\n    score: number;\n    cards: number;\n    ended: boolean;\n    startTime: number;\n    selections: Array<{card: number, time: number}>;\n}\n\ninterface GameState {\n    totalScore: number;\n    roundData: RoundData | null;\n    roundsCompleted: number;\n}\n\n/* Internal state */\nlet state: GameState = {\n    totalScore: 0,\n    roundData: null,\n    roundsCompleted: 0\n};\n\n/* Styles */\nconst TASK_STYLES = `\n    <style>\n        body { font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }\n        .card-grid { display: grid; gap: 10px; max-width: 600px; margin: 20px auto; }\n        .card { width: 80px; height: 120px; border: 2px solid #333; border-radius: 8px; cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 24px; font-weight: bold; transition: all 0.3s ease; }\n        .card-back { background: linear-gradient(45deg, #4169E1, #6495ED); color: white; }\n        .card-back:hover { background: linear-gradient(45deg, #1E3A8A, #3B82F6); transform: scale(1.05); }\n        .card-gain { background: linear-gradient(45deg, #22C55E, #16A34A); color: white; }\n        .card-loss { background: linear-gradient(45deg, #EF4444, #DC2626); color: white; }\n        .game-info { text-align: center; margin: 20px 0; font-size: 18px; }\n        .round-info { background: white; padding: 15px; border-radius: 8px; margin: 10px auto; max-width: 500px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n        .button-container { text-align: center; margin: 20px 0; }\n        .stop-button { background-color: #EF4444; color: white; border: none; padding: 12px 24px; font-size: 16px; border-radius: 6px; cursor: pointer; margin: 10px; }\n        .stop-button:hover { background-color: #DC2626; }\n        .score-display { font-size: 24px; font-weight: bold; color: #1E3A8A; }\n    </style>\n`;\n\n/* Internal functions */\nfunction resetState() {\n    state = {\n        totalScore: 0,\n        roundData: null,\n        roundsCompleted: 0\n    };\n}\n\nfunction setupRound(jsPsych: JsPsych, cfg: RoundConfig, roundNum: number, gridCols: number, numCards: number) {\n    // Create card layout\n    const lossPositions: number[] = [];\n    while (lossPositions.length < cfg.lossCards) {\n        const pos = Math.floor(Math.random() * numCards);\n        if (!lossPositions.includes(pos)) lossPositions.push(pos);\n    }\n    \n    state.roundData = {\n        score: 0,\n        cards: 0,\n        ended: false,\n        startTime: Date.now(),\n        selections: []\n    };\n    \n    // Card click handlers\n    const cards = document.querySelectorAll('.card');\n    cards.forEach((card, i) => {\n        card.addEventListener('click', function() {\n            if (!state.roundData || state.roundData.ended || !this.classList.contains('card-back')) return;\n            \n            state.roundData.cards++;\n            state.roundData.selections.push({card: i, time: Date.now() - state.roundData.startTime});\n            \n            if (lossPositions.includes(i)) {\n                this.className = 'card card-loss';\n                this.textContent = `-${cfg.lossAmount}`;\n                state.roundData.score -= cfg.lossAmount;\n                state.roundData.ended = true;\n                const messageEl = document.getElementById('message');\n                if (messageEl) {\n                    messageEl.innerHTML = '<b style=\"color:#EF4444\">Loss card! Round ended.</b>';\n                }\n                setTimeout(() => endRound(jsPsych, cfg, roundNum, false), 2000);\n            } else {\n                this.className = 'card card-gain';\n                this.textContent = `+${cfg.gainAmount}`;\n                state.roundData.score += cfg.gainAmount;\n                const scoreEl = document.getElementById('round-score');\n                if (scoreEl) {\n                    scoreEl.textContent = state.roundData.score.toString();\n                }\n                \n                if (state.roundData.cards === numCards - cfg.lossCards) {\n                    state.roundData.ended = true;\n                    const messageEl = document.getElementById('message');\n                    if (messageEl) {\n                        messageEl.innerHTML = '<b style=\"color:#22C55E\">All gain cards found!</b>';\n                    }\n                    setTimeout(() => endRound(jsPsych, cfg, roundNum, true), 2000);\n                }\n            }\n        });\n    });\n    \n    // Stop button\n    const stopBtn = document.getElementById('stop-btn');\n    if (stopBtn) {\n        stopBtn.addEventListener('click', function() {\n            if (state.roundData && !state.roundData.ended) {\n                state.roundData.ended = true;\n                const messageEl = document.getElementById('message');\n                if (messageEl) {\n                    messageEl.innerHTML = '<b style=\"color:#1E3A8A\">Round stopped!</b>';\n                }\n                setTimeout(() => endRound(jsPsych, cfg, roundNum, true), 1500);\n            }\n        });\n    }\n}\n\nfunction endRound(jsPsych: JsPsych, cfg: RoundConfig, roundNum: number, voluntary: boolean) {\n    if (!state.roundData) return;\n    \n    state.totalScore += state.roundData.score;\n    state.roundsCompleted++;\n    \n    const currentTrial = jsPsych.getCurrentTrial();\n    if (currentTrial) {\n        currentTrial.data = {\n            task: 'round_complete',\n            round: roundNum,\n            ...cfg,\n            cards_selected: state.roundData.cards,\n            round_score: state.roundData.score,\n            total_score: state.totalScore,\n            voluntary_stop: voluntary,\n            selections: state.roundData.selections,\n            rt: Date.now() - state.roundData.startTime\n        };\n    }\n    \n    jsPsych.finishTrial();\n}\n\n/* Timeline component generating functions */\nfunction createInstructions() {\n    const instructions = {\n        type: jsPsychInstructions,\n        pages: [\n            `${TASK_STYLES}\n            <h1>Columbia Card Task</h1>\n            <p>Select cards to earn points. Most cards give you points, but some lose points and end the round.</p>\n            <p>You can stop anytime to keep your points, or keep selecting for more.</p>`,\n            `<h2>Strategy</h2>\n            <p>Before each round, you'll see:</p>\n            <ul><li>Number of loss cards</li><li>Points per gain card</li><li>Loss penalty</li></ul>\n            <p>Use this info to decide your risk!</p>`\n        ],\n        show_clickable_nav: true\n    };\n    \n    return instructions;\n}\n\nfunction createRoundInfo(roundNum: number, totalRounds: number, roundConfig: RoundConfig) {\n    const roundInfo = {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: () => {\n            return `${TASK_STYLES}\n                <div class=\"round-info\">\n                    <h2>Round ${roundNum} of ${totalRounds}</h2>\n                    <p>Loss cards: <b style=\"color:#EF4444\">${roundConfig.lossCards}</b></p>\n                    <p>Loss penalty: <b style=\"color:#EF4444\">-${roundConfig.lossAmount}</b></p>\n                    <p>Gain per card: <b style=\"color:#22C55E\">+${roundConfig.gainAmount}</b></p>\n                    <p>Total score: <span class=\"score-display\">${state.totalScore}</span></p>\n                    <p>Press SPACE to start</p>\n                </div>`;\n        },\n        choices: [' ']\n    };\n    \n    return roundInfo;\n}\n\nfunction createCardGame(\n    jsPsych: JsPsych, \n    roundNum: number, \n    roundConfig: RoundConfig, \n    numCards: number, \n    gridCols: number\n) {\n    const cardGame = {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: function() {\n            const cards = Array.from({length: numCards}, (_, i) => \n                `<div class=\"card card-back\" id=\"card-${i}\">?</div>`\n            ).join('');\n            \n            return `${TASK_STYLES}\n                <style>.card-grid { grid-template-columns: repeat(${gridCols}, 1fr) !important; }</style>\n                <div class=\"game-info\">\n                    <h3>Round ${roundNum}</h3>\n                    <p>Score: <span id=\"round-score\">0</span> | Total: ${state.totalScore}</p>\n                </div>\n                <div class=\"card-grid\">\n                    ${cards}\n                </div>\n                <div class=\"button-container\">\n                    <button class=\"stop-button\" id=\"stop-btn\">Stop and Keep Points</button>\n                </div>\n                <div id=\"message\"></div>`;\n        },\n        choices: \"NO_KEYS\",\n        on_load: function() {\n            setupRound(jsPsych, roundConfig, roundNum, gridCols, numCards);\n        }\n    };\n    \n    return cardGame;\n}\n\nfunction createResults(jsPsych: JsPsych) {\n    const results = {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: function() {\n            const data = jsPsych.data.get().filter({task: 'round_complete'});\n            const avgCards = data.count() > 0 ? data.select('cards_selected').mean() : 0;\n            \n            let finalScore = 0;\n            if (data.count() > 0) {\n                const scores = data.select('total_score').values;\n                finalScore = scores[scores.length - 1];\n            }\n            \n            return `${TASK_STYLES}\n                <div class=\"round-info\">\n                    <h2>Task Complete!</h2>\n                    <p>Final Score: <span class=\"score-display\">${finalScore}</span></p>\n                    <p>Average cards selected: ${avgCards.toFixed(1)}</p>\n                    <p>Press SPACE to continue</p>\n                </div>`;\n        },\n        choices: [' ']\n    };\n    \n    return results;\n}\n\n/* Main timeline creation function */\nexport function createTimeline(\n    jsPsych: JsPsych,\n    {\n        numCards = DEFAULT_NUM_CARDS,\n        gridCols = DEFAULT_GRID_COLS,\n        rounds = DEFAULT_ROUNDS,\n        showInstructions = true,\n        showResults = true\n    }: {\n        numCards?: number,\n        gridCols?: number,\n        rounds?: RoundConfig[],\n        showInstructions?: boolean,\n        showResults?: boolean\n    } = {}\n) {\n    // Reset state for new timeline\n    resetState();\n    \n    const timeline: any[] = [];\n    \n    // Add instructions if requested\n    if (showInstructions) {\n        timeline.push(createInstructions());\n    }\n    \n    // Add rounds\n    rounds.forEach((roundConfig, idx) => {\n        const roundNum = idx + 1;\n        \n        // Round info\n        timeline.push(createRoundInfo(roundNum, rounds.length, roundConfig));\n        \n        // Card game\n        timeline.push(createCardGame(jsPsych, roundNum, roundConfig, numCards, gridCols));\n    });\n    \n    // Add results if requested\n    if (showResults) {\n        timeline.push(createResults(jsPsych));\n    }\n    \n    return timeline;\n}\n\n/* Export individual components for custom timeline building */\nexport const timelineComponents = {\n    createInstructions,\n    createRoundInfo,\n    createCardGame,\n    createResults\n};\n\n/* Export utility functions */\nexport const utils = {\n    resetState,\n    setupRound,\n    endRound\n};\n\n/* Export types */\nexport type { RoundConfig, RoundData, GameState };"]}